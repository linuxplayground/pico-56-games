ca65 V2.19 - Git 75461e131
Main file   : ../lib/vdp.s
Current file: ../lib/vdp.s

000000r 1               ; vim: set ft=asm_ca65 ts=4 sw=4 et:vdp
000000r 1               
000000r 1               .include "io.inc"
000000r 2               ; vim: set ft=asm_ca65 ts=4 sw=4 et:
000000r 2               vdp_ram = $7f10
000000r 2               vdp_reg = $7f11
000000r 2               
000000r 2               
000000r 1               .include "app.inc"
000000r 2               ; vim: set ft=asm_ca65 et ts=4 sw=4
000000r 2               ;
000000r 2               ; Copyright (c) 2024 David Latham
000000r 2               ;
000000r 2               ; This code is licensed under the MIT license
000000r 2               ;
000000r 2               ; https://github.com/linuxplayground/pico-56-games
000000r 2               
000000r 2               
000000r 2               NAMETABLE               = $3800
000000r 2               COLORTABLE              = $2000
000000r 2               PATTERNTABLE            = $0000
000000r 2               SPRITEATTRIBUTETABLE    = $3B00
000000r 2               SPRITEPATTERNTABLE      = $1800
000000r 2               
000000r 2               .enum jstate
000000r 2                   still   = 0
000000r 2                   left    = 1
000000r 2                   right   = 2
000000r 2                   jump_1  = 3 ;
000000r 2                   jump_2  = 4 ; good jump
000000r 2                   jump_3  = 5 ; good jump
000000r 2                   falling = 6
000000r 2                   crash   = 7 ; when a jump is bad
000000r 2                   crash_fall = 8
000000r 2                   stun    = 9 ; second half of a bad jump
000000r 2               .endenum
000000r 2               
000000r 2               .struct sprite
000000r 2                   yp .byte
000000r 2                   xp .byte
000000r 2                   pa .byte
000000r 2                   co .byte
000000r 2               .endstruct
000000r 2               
000000r 1               .include "macro.inc"
000000r 2               ; vim: set ft=asm_ca65 ts=4 sw=4 et:vdp
000000r 2               .macro div8
000000r 2                   .repeat 3
000000r 2                       lsr
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro mul32
000000r 2                   .repeat 5
000000r 2                       asl
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro store16 addr,val16
000000r 2                   lda #val16
000000r 2                   sta addr
000000r 2                   lda #val16
000000r 2                   sta addr + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro memcpy dst, src, cnt
000000r 2               .if cnt <= 0
000000r 2                   .error "memcpy: ivalid count: ", cnt
000000r 2               .elseif cnt <= 8
000000r 2                   .repeat  cnt - 1, i
000000r 2                       lda src + i
000000r 2                       sta dst + i
000000r 2                   .endrepeat
000000r 2               .elseif cnt <= 256
000000r 2                   ldx #0
000000r 2               :
000000r 2                   lda src, x
000000r 2                   sta dst, x
000000r 2                   inx
000000r 2                   cpx #(cnt & $ff)
000000r 2                   bne :-
000000r 2               .else
000000r 2                   store16 MEM_SRC, src
000000r 2                   store16 MEM_DST, dst
000000r 2                   store16 MEM_LEN, cnt
000000r 2               
000000r 2                   jsr memcpyMultiPage
000000r 2               .endif
000000r 2               
000000r 2               .macro setMemCpySrc src
000000r 2                   store16 MEM_SRC, src
000000r 2               .endmacro
000000r 2               
000000r 2               .macro setMemCpyDst dst
000000r 2                   store16 MEM_DST, dst
000000r 2               .endmacro
000000r 2               
000000r 2               .macro setMemCpySrcInd srcRef
000000r 2                   lda srcRef
000000r 2                   sta MEM_SRC
000000r 2                   lda srcRef + 1
000000r 2                   sta MEM_SRC + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro setMemCpyDstInd dstRef
000000r 2                   lda dstRef
000000r 2                   sta MEM_DST
000000r 2                   lda dstRef + 1
000000r 2                   sta MEM_DST + 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro memcpySinglePage bytes
000000r 2               
000000r 2                   .if bytes <= 0
000000r 2                       !error "memcpySinglePage: ivalid count: ", byte
000000r 2                   .endif
000000r 2               
000000r 2                   ldy #bytes
000000r 2                   jsr memcpySinglePage
000000r 2               .endmacro
000000r 2               
000000r 2               .macro memset dst,val, cnt
000000r 2               .if cnt <= 0
000000r 2                   .error "memset: ivalid count: ", cnt
000000r 2               .elseif cnt <= 8
000000r 2                   lda val
000000r 2                   .repeat cnt-1, i
000000r 2                       sta dst + i
000000r 2                   .endrepeat
000000r 2               .elseif cnt <= 256
000000r 2                   ldx #<cnt
000000r 2                   lda val
000000r 2               :
000000r 2                   dex
000000r 2                   sta dst, x
000000r 2                   cpx #0
000000r 2                   bne :-
000000r 2               .else
000000r 2                   store16 MEM_DST, dst
000000r 2                   store16 MEM_LEN, cnt
000000r 2                   lda val
000000r 2                   jsr memsetMultiPage
000000r 2               .endif
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               
000000r 1               .export vdp_g2_init, vdp_clear_screenbuf, vdp_wait, vdp_flush
000000r 1               .export vdp_screenbuf, vdp_xy_to_ptr, vdp_print_xy, vdp_char_xy
000000r 1               .export vdp_read_char_xy, vdp_color_char, set_write_address, set_read_address
000000r 1               .export load_font_patterns, load_sprite_patterns
000000r 1               
000000r 1               .autoimport
000000r 1               
000000r 1               .globalzp ptr1, ptr2
000000r 1               
000000r 1               .zeropage
000000r 1               
000000r 1               .bss
000000r 1               .align $100
000000r 1  xx xx xx xx  vdp_screenbuf: .res $300
000004r 1  xx xx xx xx  
000008r 1  xx xx xx xx  
000300r 1               
000300r 1               .code
000000r 1               
000000r 1               vdp_xy_to_ptr:
000000r 1  48               pha
000001r 1  A9 rr            lda #<vdp_screenbuf
000003r 1  85 rr            sta ptr1
000005r 1  A9 rr            lda #>vdp_screenbuf
000007r 1  85 rr            sta ptr1+1
000009r 1               
000009r 1  98               tya
00000Ar 1  4A 4A 4A         div8
00000Dr 1  18               clc
00000Er 1  65 rr            adc ptr1+1
000010r 1  85 rr            sta ptr1+1
000012r 1  98               tya
000013r 1  29 07            and  #$07
000015r 1  0A 0A 0A 0A      mul32
000019r 1  0A           
00001Ar 1  85 rr            sta ptr1
00001Cr 1               @add_x:
00001Cr 1  18               clc
00001Dr 1  8A               txa
00001Er 1  65 rr            adc ptr1
000020r 1  85 rr            sta ptr1
000022r 1  A9 00            lda #0
000024r 1  65 rr            adc ptr1+1
000026r 1  85 rr            sta ptr1+1
000028r 1               @return:
000028r 1  68               pla
000029r 1  60               rts
00002Ar 1               
00002Ar 1               vdp_char_xy:
00002Ar 1  20 rr rr         jsr vdp_xy_to_ptr
00002Dr 1  92 rr            sta (ptr1)
00002Fr 1  60               rts
000030r 1               
000030r 1               vdp_read_char_xy:
000030r 1  20 rr rr         jsr vdp_xy_to_ptr
000033r 1  B2 rr            lda (ptr1)
000035r 1  60               rts
000036r 1               
000036r 1               ; string pointer in ptr2
000036r 1               vdp_print_xy:
000036r 1  20 rr rr         jsr vdp_xy_to_ptr
000039r 1  A0 00            ldy #0
00003Br 1  B1 rr        :   lda (ptr2),y
00003Dr 1  F0 05            beq :+
00003Fr 1  91 rr            sta (ptr1),y
000041r 1  C8               iny
000042r 1  80 F7            bra :-
000044r 1  60           :   rts
000045r 1               
000045r 1               vdp_g2_init:
000045r 1  20 rr rr         jsr clear_vram
000048r 1  A9 rr            lda #<g2_regs
00004Ar 1  A2 rr            ldx #>g2_regs
00004Cr 1  20 rr rr         jsr init_regs
00004Fr 1  A9 6E            lda #$6e
000051r 1  20 rr rr         jsr setup_colortable
000054r 1  20 rr rr         jsr vdp_clear_screenbuf
000057r 1  20 rr rr         jsr init_sprite_attributes
00005Ar 1  60               rts
00005Br 1               
00005Br 1               clear_vram:
00005Br 1  A9 00            lda #0
00005Dr 1  A2 00            ldx #0
00005Fr 1  20 rr rr         jsr set_write_address
000062r 1  A9 00            lda #0
000064r 1  A0 00            ldy #0
000066r 1  A2 3F            ldx #$3F
000068r 1  8D 10 7F     :   sta vdp_ram
00006Br 1  C8               iny
00006Cr 1  D0 FA            bne :-
00006Er 1  CA               dex
00006Fr 1  D0 F7            bne :-
000071r 1  60               rts
000072r 1               
000072r 1               ; INPUT: A = character
000072r 1               ;        X = color
000072r 1               vdp_color_char:
000072r 1  DA               phx
000073r 1  0A               asl
000074r 1  0A               asl
000075r 1  0A               asl     ; x 8
000076r 1  85 rr            sta ptr1+0
000078r 1  A9 00            lda #<COLORTABLE
00007Ar 1  18               clc
00007Br 1  65 rr            adc ptr1+0
00007Dr 1  85 rr            sta ptr1+0
00007Fr 1  A9 20            lda #>COLORTABLE
000081r 1  69 00            adc #0
000083r 1  85 rr            sta ptr1+1
000085r 1  A5 rr            lda ptr1+0
000087r 1  A6 rr            ldx ptr1+1
000089r 1  20 rr rr         jsr set_write_address
00008Cr 1  FA               plx
00008Dr 1  8E 10 7F 8E      .repeat 8
000091r 1  10 7F 8E 10  
000095r 1  7F 8E 10 7F  
0000A5r 1                       stx vdp_ram
0000A5r 1                   .endrepeat
0000A5r 1  60               rts
0000A6r 1               
0000A6r 1               
0000A6r 1               vdp_wait:
0000A6r 1  AD rr rr         lda _vdp_sync
0000A9r 1  C9 80            cmp #$80
0000ABr 1  D0 F9            bne vdp_wait
0000ADr 1  9C rr rr         stz _vdp_sync
0000B0r 1  60               rts
0000B1r 1               
0000B1r 1               vdp_flush:
0000B1r 1  A9 00            lda #<NAMETABLE
0000B3r 1  A2 38            ldx #>NAMETABLE
0000B5r 1  20 rr rr         jsr set_write_address
0000B8r 1  A9 rr            lda #<vdp_screenbuf
0000BAr 1  85 rr            sta ptr1
0000BCr 1  A9 rr            lda #>vdp_screenbuf
0000BEr 1  85 rr            sta ptr1 + 1
0000C0r 1  A0 00            ldy #0
0000C2r 1  A2 03            ldx #3
0000C4r 1  B1 rr        :   lda (ptr1),y
0000C6r 1  8D 10 7F         sta vdp_ram
0000C9r 1  C8               iny
0000CAr 1  D0 F8            bne :-
0000CCr 1  E6 rr            inc ptr1+1
0000CEr 1  CA               dex
0000CFr 1  D0 F3            bne :-
0000D1r 1  60               rts
0000D2r 1               
0000D2r 1               vdp_clear_screenbuf:
0000D2r 1  A9 rr            lda #<vdp_screenbuf
0000D4r 1  85 rr            sta ptr1
0000D6r 1  A9 rr            lda #>vdp_screenbuf
0000D8r 1  85 rr            sta ptr1 + 1
0000DAr 1  A0 00            ldy #0
0000DCr 1  A2 04            ldx #4
0000DEr 1  A9 20            lda #' '
0000E0r 1  91 rr        :   sta (ptr1),y
0000E2r 1  C8               iny
0000E3r 1  D0 FB            bne :-
0000E5r 1  E6 rr            inc ptr1+1
0000E7r 1  CA               dex
0000E8r 1  D0 F6            bne :-
0000EAr 1  60               rts
0000EBr 1               
0000EBr 1               setup_colortable:
0000EBr 1  A8               tay
0000ECr 1  A9 00            lda #<COLORTABLE
0000EEr 1  A2 20            ldx #>COLORTABLE
0000F0r 1  20 rr rr         jsr set_write_address
0000F3r 1  98               tya
0000F4r 1  A0 00            ldy #0
0000F6r 1  A2 04            ldx #4
0000F8r 1  8D 10 7F     :   sta vdp_ram
0000FBr 1  C8               iny
0000FCr 1  D0 FA            bne :-
0000FEr 1  CA               dex
0000FFr 1  D0 F7            bne :-
000101r 1  60               rts
000102r 1               
000102r 1               init_regs:
000102r 1  85 rr            sta ptr1
000104r 1  86 rr            stx ptr1+1
000106r 1  A0 00            ldy #0
000108r 1  B1 rr        :   lda (ptr1),y
00010Ar 1  8D 11 7F         sta vdp_reg
00010Dr 1  98               tya
00010Er 1  09 80            ora #$80
000110r 1  8D 11 7F         sta vdp_reg
000113r 1  C8               iny
000114r 1  C0 08            cpy #8
000116r 1  D0 F0            bne :-
000118r 1  60               rts
000119r 1               
000119r 1               set_write_address:
000119r 1  8D 11 7F         sta vdp_reg
00011Cr 1  8A               txa
00011Dr 1  09 40            ora #$40
00011Fr 1  8D 11 7F         sta vdp_reg
000122r 1  60               rts
000123r 1               
000123r 1               set_read_address:
000123r 1  8D 11 7F         sta vdp_reg
000126r 1  8E 11 7F         stx vdp_reg
000129r 1  60               rts
00012Ar 1               
00012Ar 1               load_font_patterns:
00012Ar 1  A9 00            lda #<PATTERNTABLE
00012Cr 1  A2 00            ldx #>PATTERNTABLE
00012Er 1  20 rr rr         jsr set_write_address
000131r 1                   ; fall through
000131r 1                   ; fall through
000131r 1               copy_ptr1_to_ptr2:
000131r 1  A0 00            ldy #0
000133r 1  B1 rr        :   lda (ptr1),y
000135r 1  8D 10 7F         sta vdp_ram
000138r 1  A5 rr            lda ptr1
00013Ar 1  18               clc
00013Br 1  69 01            adc #1
00013Dr 1  85 rr            sta ptr1
00013Fr 1  A9 00            lda #0
000141r 1  65 rr            adc ptr1+1
000143r 1  85 rr            sta ptr1+1
000145r 1  C5 rr            cmp ptr2+1
000147r 1  D0 EA            bne :-
000149r 1  A5 rr            lda ptr1
00014Br 1  C5 rr            cmp ptr2
00014Dr 1  D0 E4            bne :-
00014Fr 1  60               rts
000150r 1               
000150r 1               ; INPUT: ptr1 ptr to start of sprite pattern data
000150r 1               ;        ptr2 ptr to end of sprite pattern data
000150r 1               load_sprite_patterns:
000150r 1  A9 00            lda #<SPRITEPATTERNTABLE
000152r 1  A2 18            ldx #>SPRITEPATTERNTABLE
000154r 1  20 rr rr         jsr set_write_address
000157r 1  4C rr rr         jmp copy_ptr1_to_ptr2
00015Ar 1               
00015Ar 1               ; Init all sprites to disabled.
00015Ar 1               init_sprite_attributes:
00015Ar 1  A9 00            lda #<SPRITEATTRIBUTETABLE
00015Cr 1  A2 3B            ldx #>SPRITEATTRIBUTETABLE
00015Er 1  20 rr rr         jsr set_write_address
000161r 1  A2 20            ldx #32
000163r 1               @L1:
000163r 1  A9 D0            lda #$D0
000165r 1  8D 10 7F         sta vdp_ram
000168r 1  9C 10 7F         stz vdp_ram
00016Br 1  9C 10 7F         stz vdp_ram
00016Er 1  9C 10 7F         stz vdp_ram
000171r 1  CA               dex
000172r 1  D0 EF            bne @L1
000174r 1  60               rts
000175r 1               
000175r 1               .rodata
000000r 1               g2_regs:
000000r 1  02               .byte $02
000001r 1  E2               .byte $e2
000002r 1  0E               .byte $0e
000003r 1  9F               .byte $9f
000004r 1  00               .byte $00
000005r 1  76               .byte $76
000006r 1  03               .byte $03
000007r 1  2B               .byte $2b
000008r 1               
000008r 1               
